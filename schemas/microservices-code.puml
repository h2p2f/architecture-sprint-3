@startuml
  !include <C4/C4_Component.puml>


Container_Boundary(DeviceService, "Device Service") {
    package "Device Service" {
    class Device {
        +UUID id
        +UUID vendor_id
        +UUID owner_id
        +UUID house_id
        +String name
        +Boolean is_active
        +function process_command(id, command))
        +function get_status(id)
        }
    }
    package "Device Command Handler" {
    class DeviceCommandHandler {
        +function handle_command(id, command, User.VendorToken)
        }
    }
    package "Device State Manager" {
    class DeviceStateManager {
        +function get_state(id)
        +function save_state(id, state)
        }
    }
    Device <--> DeviceCommandHandler
    Device <--> DeviceStateManager
    DeviceCommandHandler <--> DeviceStateManager
    DeviceStateManager <--> DeviceDB

}

Container_Boundary(TelemetryService, "Telemetry Service") {
    package "Telemetry Service" {
    class Telemetry {
        +UUID device_id
        +Telemetry data
        +function get_telemetry_data(device_id)
        +function save_telemetry_data(device_id, data)
        }
    }
    DeviceStateManager <--> Telemetry
    Telemetry <--> TelemetryDB
}

Container_Boundary(UserService, "User Service") {
    package "User Service" {
    class User {
        +UUID id
        +UUID house_id
        +VendorToken vendor_token
        +String name
        +String email
        +String password
        +function get_user_data(id)
        +function save_user(user)
        }
    }
    User <--> Device
    User <--> UserDB

}

Container_Boundary(VendorAPI, "Vendor API") {
    package "Vendor API" {
    class Vendor {
        +UUID vendor_id
        +VendorParams params
        +function get_device_status(id)
        +function set_device_command(id, command)
        }
    }
    Vendor <--> DeviceCommandHandler
    Vendor <--> DeviceStateManager
    Vendor --> Telemetry
    Vendor <--> VendorDB
}




@enduml